// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace TravelCompanion.Domain.Models;

public partial class TravelCompanionContext : DbContext
{
    public TravelCompanionContext(DbContextOptions<TravelCompanionContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AppUser> AppUsers { get; set; }

    public virtual DbSet<Companion> Companions { get; set; }

    public virtual DbSet<Trip> Trips { get; set; }

    public virtual DbSet<TripChat> TripChats { get; set; }

    public virtual DbSet<TripEvent> TripEvents { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasAnnotation("Scaffolding:ConnectionString", "Data Source=(local);Initial Catalog=TravelCompanion.Database;Integrated Security=true");

        modelBuilder.Entity<AppUser>(entity =>
        {
            entity.ToTable("AppUser");

            entity.HasIndex(e => e.Email, "UNQ_AppUser_Email").IsUnique();

            entity.Property(e => e.AppUserGuid).HasDefaultValueSql("NEWID()");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(256);
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValueSql("1");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Companion>(entity =>
        {
            entity.ToTable("Companion");

            entity.Property(e => e.CompanionGuid).HasDefaultValueSql("NEWID()");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Trip).WithMany(p => p.Companions)
                .HasForeignKey(d => d.TripId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Trip>(entity =>
        {
            entity.ToTable("Trip");

            entity.Property(e => e.ArrivalDate).HasColumnType("date");
            entity.Property(e => e.DepartureDate).HasColumnType("date");
            entity.Property(e => e.LodgingAddress).HasMaxLength(100);
            entity.Property(e => e.LodgingCity).HasMaxLength(100);
            entity.Property(e => e.LodgingCountry).HasMaxLength(100);
            entity.Property(e => e.LodgingName).HasMaxLength(100);
            entity.Property(e => e.LodgingPostalCode).HasMaxLength(100);
            entity.Property(e => e.LodgingState).HasMaxLength(100);
            entity.Property(e => e.TripGuid).HasDefaultValueSql("NEWID()");

            entity.HasOne(d => d.AppUser).WithMany(p => p.Trips)
                .HasForeignKey(d => d.AppUserId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<TripChat>(entity =>
        {
            entity.ToTable("TripChat");

            entity.Property(e => e.Description).HasMaxLength(100);
            entity.Property(e => e.TripChatGuid).HasDefaultValueSql("NEWID()");

            entity.HasOne(d => d.Trip).WithMany(p => p.TripChats)
                .HasForeignKey(d => d.TripId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<TripEvent>(entity =>
        {
            entity.ToTable("TripEvent");

            entity.Property(e => e.EndDateTime).HasColumnType("datetime");
            entity.Property(e => e.EventName).HasMaxLength(100);
            entity.Property(e => e.StartDateTime).HasColumnType("datetime");
            entity.Property(e => e.TripEventGuid).HasDefaultValueSql("NEWID()");
            entity.Property(e => e.VenueAddress).HasMaxLength(100);
            entity.Property(e => e.VenueCity).HasMaxLength(100);
            entity.Property(e => e.VenueCountry).HasMaxLength(100);
            entity.Property(e => e.VenueName).HasMaxLength(100);
            entity.Property(e => e.VenuePostalCode).HasMaxLength(100);
            entity.Property(e => e.VenueState).HasMaxLength(100);

            entity.HasOne(d => d.Trip).WithMany(p => p.TripEvents)
                .HasForeignKey(d => d.TripId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}